{"name":"Assetdistributionmanager","tagline":"A solution to manage and download assets to your live iOS app.","body":"# Asset Distribution Manager\r\n\r\n_A lightweight solution to manage OTA asset distribution to live iOS apps._\r\n\r\n**_This project is currently in active development and should not be used in production_**\r\n\r\n### The problem\r\n\r\niOS apps must have an app size below 50MB to be downloaded OTA from a cellular network. This results in losing a lot of potential users by not being able to download the app if they're not connected to a WiFi network.\r\n\r\n### The solution\r\n\r\nDo what it takes to ship the app with under 50MB of content (remove art, sound, etc.) and let ADM download those for you.\r\n\r\n## Goals\r\n\r\nThis project was built with specific goals in mind:\r\n\r\n* Very lightweight!\r\n* Zero dependencies!\r\n* NO singletons! Create as many ADMRepos as you like!\r\n* Delegate driven!\r\n* Excellent Documentation!\r\n* Unit Tested!\r\n\r\n## Example\r\n\r\n```objc\r\n- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \r\n    NSURL *url = [NSURL URLWithString:@\"http://s3.amazonaws.com/my-bucket/\"];\r\n    \r\n    self.repo = [[ADMRepo alloc] initWithSourceURL:url repoId:@\"com.adm.level1\"];\r\n    self.repo.delegate = self;\r\n    [self.repo update];\r\n}\r\n\r\n- (void)repo:(ADMRepo *)repo downloadProgress:(float)progress\r\n{\r\n    NSLog(@\"%.2f%% downloaded\", progress * 100);\r\n}\r\n\r\n- (void)didFinishUpdatingRepo:(ADMRepo *)repo\r\n{\r\n    NSBundle *dogsBundle = [ADMBundle bundleWithDescriptor:@\"com.adm.level1.dogs\"];\r\n    NSBundle *catsBundle = [ADMBundle bundleWithDescriptor:@\"com.adm.level1.cats\"];\r\n    \r\n    NSString *dog = [dogsBundle pathForResource:@\"dog1\" ofType:@\"png\"];\r\n    NSString *cat = [catsBundle pathForResource:@\"cat1\" ofType:@\"png\"];\r\n    \r\n    self.dogImageView.image = [UIImage imageWithContentsOfFile:dog];\r\n    self.catImageView.image = [UIImage imageWithContentsOfFile:cat];\r\n}\r\n```\r\n\r\n## Server format\r\n\r\n### Repo\r\n\r\nADM treats server assets as repositories. A repository is a directory with a unique name that houses any number of bundles and an `index.json` file which lists the contents of the repo.\r\n\r\n### Bundle\r\n\r\nA bundle is simply a tarball of a directory of assets that's named with a version identifier. For example, `cats-1.tar.gz` is a bundle that will become `cats-2.tar.gz` when new assets are added to that bundle.\r\n\r\n### index.json\r\n\r\nThe `index.json` file lists the contents of the bundles and their versions. It looks like this:\r\n\r\n```json\r\n{\r\n    \"bundles\": {\r\n        \"art\": {\r\n            \"version\": 4\r\n        },\r\n        \"sound\": {\r\n            \"version\": 7\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe bundles' dictionary keys correspond to each existing bundle name, and their version is listed as a dictionary of the bundle. This format is not subject to change. It looks more complex than necessary simply for future proofing. Currently there are no plans to create a tool to automatically build and eploy ADM repositories.\r\n\r\n## Acknowledgements\r\n\r\n* This project is heavily inspired by [Zinc](https://github.com/mindsnacks/Zinc-objc). If you need a more feature-complete solution, please check that out!\r\n* ADM's concurrent download operation is heavily influenced from [AFNetworking](https://github.com/afnetworking/afnetworking)'s AFURLConnectionOperation.\r\n* In order to avoid dependencies, I borrowed and modified a large portion of [Light-Untar-for-iOS](https://github.com/mhausherr/Light-Untar-for-iOS).\r\n\r\n## TODO\r\n\r\n* Test every possible scenario\r\n* Write more tests\r\n* Write more documentation","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}